syntax on
set nocompatible
set laststatus=2
set linebreak
set number
set expandtab
set tabstop=4
set guioptions=t
set autochdir
set autoindent
set nowrap
set hlsearch
set guifont=Hack\ 9
set wildmenu
set undofile
set undodir=/home/manu/.vimundo/
set so=5
ino jj <Esc> 

set wildignore+=*.a,*.o
set wildignore+=*.png,*.tga,*.tif,*.jpg
set wildignore+=*.blend*
set wildignore+=*.git
set wildignore+=*.swp,*.tmp

"-------------"
" Folding settings
set foldmethod=syntax
set foldnestmax=10
set nofoldenable
set foldlevel=1

" Used to setup Vundle
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"-------------"
" Plugins
Bundle 'gmarik/vundle'
Bundle 'Shougo/vimproc.vim'

" Completion
Bundle 'Shougo/neocomplete.vim'
Bundle 'osyo-manga/vim-marching'

" Git stuff
Bundle 'tpope/vim-fugitive'
Bundle 'gregsexton/gitv'

" Theme
Bundle 'altercation/vim-colors-solarized'
Bundle 'vim-airline/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
Bundle 'majutsushi/tagbar'

" Usage
Bundle 'xolox/vim-session'
Bundle 'vim-scripts/a.vim'
Bundle 'ctrlpvim/ctrlp.vim'
Bundle 'mbbill/undotree'
Bundle 'scrooloose/nerdtree'
Bundle 'Xuyuanp/nerdtree-git-plugin'
Bundle 'tpope/vim-vinegar'
Bundle 'airblade/vim-rooter'

" Code highlight / format
Bundle 'rhysd/vim-clang-format'
Bundle 'vim-jp/cpp-vim'
Bundle 'fidian/hexmode'
Bundle 'armyofevilrobots/vim-openscad'
Bundle 'jansenm/vim-cmake'
Bundle 'tikhomirov/vim-glsl'
Bundle 'vim-syntastic/syntastic'

" Miscellaneous
Bundle 'xolox/vim-misc'
Bundle 'Konfekt/FastFold'

filetype plugin on

"-------------"
" Shortcuts
nnoremap <F5> :NERDTreeFocus<CR>
nnoremap <F6> :UndotreeToggle \| UndotreeFocus<CR>
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"-------------"
" Theme
set background=dark
colorscheme solarized

"-------------"
" Vim-session
let g:session_autosave = 'no'
let g:session_autoload = 'no'
set sessionoptions-=buffers

"-------------"
" Rooter
let g:rooter_patterns = ['.git/']
let g:rooter_silent_chdir = 1
let g:rooter_manual_only = 1

"-------------"
" Latex related configuration
set grepprg=grep\ -nH\ $*i
let g:tex_flavor='latex'

"-------------"
" vim-flake8
let python_highlight_all=1

"-------------"
" Airline
"let g:airline_section_warning=''
let g:airline_powerline_fonts=1
let g:airline#extensions#tagbar#enabled = 0
if has('gui_running')
    let g:airline_theme='solarized'
else
    let g:airline_theme='dark'
endif

"-------------"
" Gitv
let g:Gitv_OpenHorizontal=1

"-------------"
" Tagbar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_autoclose=0
set tags=./tags;/

"-------------"
" a.vim
let g:alternateSearchPath = 'reg:#\<src\>$#include#,reg:#\<include\>$#src#'

"-------------"
" CtrlP
let g:ctrlp_working_path_mode = 'ra'

"-------------"
" vim-clang-format
let g:clang_format#style_options = {
    \ "BasedOnStyle" : "LLVM",
    \ "AlignTrailingComments" : "true",
    \ "AlwaysBreakTemplateDeclarations" : "true",
    \ "AlignAfterOpenBracket" : "DontAlign",
    \ "AllowShortFunctionsOnASingleLine" : "Inline",
    \ "BinPackArguments" : "false",
    \ "BinPackParameters" : "false",
    \ "BreakBeforeBraces" : "Allman",
    \ "ColumnLimit" : 180,
    \ "IndentWidth" : 4,
    \ "PointerAlignment" : "Left",
    \ "Standard" : "Cpp11",
    \ "TabWidth" : 4}
autocmd FileType c,cpp ClangFormatAutoDisable

"-------------"
" neocomplete
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#disable_auto_complete = 0
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 4

" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

"-------------"
" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_python_checkers = ['pylint']
let g:syntastic_c_checkers = ['cppcheck']

nmap <F3> :SyntasticCheck<CR>
nmap <F4> :SyntasticToggleMode<CR>

"-------------"
" vim-marching
let g:marching_clang_command = "clang"
let g:marching#clang_command#options = {
\     "cpp" : "-std=gnu++14"
\ }
let g:marching_include_paths = [
\ "/usr/include",
\ "/usr/local/include"
\]
let g:marching_enable_neocomplete = 1

if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp = ''
"	\ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

set updatetime=200

"-------------"
" FastFold
nmap zuz <Plug>(FastFoldUpdate)
let g:fastfold_savehook = 1
let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
